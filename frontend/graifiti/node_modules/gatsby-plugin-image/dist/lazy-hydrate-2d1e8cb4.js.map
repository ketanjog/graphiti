{"version":3,"file":"lazy-hydrate-2d1e8cb4.js","sources":["../src/components/lazy-hydrate.tsx"],"sourcesContent":["/* global HAS_REACT_18 */\nimport React, { MutableRefObject } from \"react\"\nimport { GatsbyImageProps } from \"./gatsby-image.browser\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImageProps, MainImage } from \"./main-image\"\nimport { getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { ReactElement } from \"react\"\nimport type { Root } from \"react-dom/client\"\n\ntype LazyHydrateProps = Omit<GatsbyImageProps, \"as\" | \"style\" | \"className\"> & {\n  isLoading: boolean\n  isLoaded: boolean // alwaystype SetStateAction<S> = S | ((prevState: S) => S);\n  toggleIsLoaded: (toggle: boolean) => void\n  ref: MutableRefObject<HTMLImageElement | undefined>\n}\n\nlet reactRender\nlet reactHydrate\nif (HAS_REACT_18) {\n  const reactDomClient = require(`react-dom/client`)\n  reactRender = (\n    Component: React.ReactChild | Iterable<React.ReactNode>,\n    el: ReactDOM.Container,\n    root: Root\n  ): Root => {\n    if (!root) {\n      root = reactDomClient.createRoot(el)\n    }\n\n    root.render(Component)\n\n    return root\n  }\n  reactHydrate = (\n    Component: React.ReactChild | Iterable<React.ReactNode>,\n    el: ReactDOM.Container\n  ): Root => reactDomClient.hydrateRoot(el, Component)\n} else {\n  const reactDomClient = require(`react-dom`)\n  reactRender = (\n    Component: React.ReactChild | Iterable<React.ReactNode>,\n    el: ReactDOM.Container\n  ): void => {\n    reactDomClient.render(Component, el)\n  }\n  reactHydrate = reactDomClient.hydrate\n}\n\nexport function lazyHydrate(\n  {\n    image,\n    loading,\n    isLoading,\n    isLoaded,\n    toggleIsLoaded,\n    ref,\n    imgClassName,\n    imgStyle = {},\n    objectPosition,\n    backgroundColor,\n    objectFit = `cover`,\n    ...props\n  }: LazyHydrateProps,\n  root: MutableRefObject<HTMLElement | undefined>,\n  hydrated: MutableRefObject<boolean>,\n  forceHydrate: MutableRefObject<boolean>,\n  reactRootRef: MutableRefObject<Root>\n): (() => void) | null {\n  const {\n    width,\n    height,\n    layout,\n    images,\n    placeholder,\n    backgroundColor: wrapperBackgroundColor,\n  } = image\n\n  const cacheKey = JSON.stringify(images)\n\n  imgStyle = {\n    objectFit,\n    objectPosition,\n    backgroundColor,\n    ...imgStyle,\n  }\n\n  const component = (\n    <LayoutWrapper layout={layout} width={width} height={height}>\n      <Placeholder\n        {...getPlaceholderProps(\n          placeholder,\n          isLoaded,\n          layout,\n          width,\n          height,\n          wrapperBackgroundColor,\n          objectFit,\n          objectPosition\n        )}\n      />\n\n      <MainImage\n        {...(props as Omit<MainImageProps, \"images\" | \"fallback\">)}\n        width={width}\n        height={height}\n        className={imgClassName}\n        {...getMainProps(\n          isLoading,\n          isLoaded,\n          images,\n          loading,\n          toggleIsLoaded,\n          cacheKey,\n          ref,\n          imgStyle\n        )}\n      />\n    </LayoutWrapper>\n  )\n\n  if (root.current) {\n    // Force render to mitigate \"Expected server HTML to contain a matching\" in develop\n    if (hydrated.current || forceHydrate.current || HAS_REACT_18) {\n      reactRootRef.current = reactRender(\n        component,\n        root.current,\n        reactRootRef.current\n      )\n    } else {\n      reactHydrate(component, root.current)\n    }\n    hydrated.current = true\n  }\n\n  return (): void => {\n    if (root.current) {\n      reactRender(\n        null as unknown as ReactElement,\n        root.current,\n        reactRootRef.current\n      )\n    }\n  }\n}\n"],"names":["reactRender","reactHydrate","HAS_REACT_18","reactDomClient","require","Component","el","root","createRoot","render","hydrateRoot","hydrate","lazyHydrate","hydrated","forceHydrate","reactRootRef","image","loading","isLoading","isLoaded","toggleIsLoaded","ref","imgClassName","imgStyle","objectPosition","backgroundColor","objectFit","props","width","height","layout","images","placeholder","wrapperBackgroundColor","cacheKey","JSON","stringify","component","React","LayoutWrapper","Placeholder","getPlaceholderProps","MainImage","className","getMainProps","current"],"mappings":"4KAiBIA,EACAC,+IACJ,GAAIC,aAAc,CAChB,IAAMC,EAAiBC,4BACvBJ,EAAc,SACZK,EACAC,EACAC,GAQA,OANKA,IACHA,EAAOJ,EAAeK,WAAWF,IAGnCC,EAAKE,OAAOJ,GAELE,GAETN,EAAe,SACbI,EACAC,UACSH,EAAeO,YAAYJ,EAAID,QACrC,CACL,IAAMF,EAAiBC,qBACvBJ,EAAc,SACZK,EACAC,GAEAH,EAAeM,OAAOJ,EAAWC,IAEnCL,EAAeE,EAAeQ,iBAGhBC,IAedL,EACAM,EACAC,EACAC,OAhBEC,IAAAA,MACAC,IAAAA,QACAC,IAAAA,UACAC,IAAAA,SACAC,IAAAA,eACAC,IAAAA,IACAC,IAAAA,iBACAC,SAAAA,aAAW,KACXC,IAAAA,eACAC,IAAAA,oBACAC,UAAAA,uBACGC,SAQHC,EAMEZ,EANFY,MACAC,EAKEb,EALFa,OACAC,EAIEd,EAJFc,OACAC,EAGEf,EAHFe,OACAC,EAEEhB,EAFFgB,YACiBC,EACfjB,EADFS,gBAGIS,EAAWC,KAAKC,UAAUL,GAEhCR,KACEG,UAAAA,EACAF,eAAAA,EACAC,gBAAAA,GACGF,GAGL,IAAMc,EACJC,gBAACC,GAAcT,OAAQA,EAAQF,MAAOA,EAAOC,OAAQA,GACnDS,gBAACE,OACKC,EACFT,EACAb,EACAW,EACAF,EACAC,EACAI,EACAP,EACAF,KAIJc,gBAACI,OACMf,GACLC,MAAOA,EACPC,OAAQA,EACRc,UAAWrB,GACPsB,EACF1B,EACAC,EACAY,EACAd,EACAG,EACAc,EACAb,EACAE,MAoBR,OAdIhB,EAAKsC,UAEHhC,EAASgC,SAAW/B,EAAa+B,SAAW3C,aAC9Ca,EAAa8B,QAAU7C,EACrBqC,EACA9B,EAAKsC,QACL9B,EAAa8B,SAGf5C,EAAaoC,EAAW9B,EAAKsC,SAE/BhC,EAASgC,SAAU,cAIftC,EAAKsC,SACP7C,EACE,KACAO,EAAKsC,QACL9B,EAAa8B"}